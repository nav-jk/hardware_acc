// ==============================================================
// Generated by Vitis HLS v2025.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module winograd_winograd_Pipeline_read_d (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_0_AWVALID,
        m_axi_gmem_0_AWREADY,
        m_axi_gmem_0_AWADDR,
        m_axi_gmem_0_AWID,
        m_axi_gmem_0_AWLEN,
        m_axi_gmem_0_AWSIZE,
        m_axi_gmem_0_AWBURST,
        m_axi_gmem_0_AWLOCK,
        m_axi_gmem_0_AWCACHE,
        m_axi_gmem_0_AWPROT,
        m_axi_gmem_0_AWQOS,
        m_axi_gmem_0_AWREGION,
        m_axi_gmem_0_AWUSER,
        m_axi_gmem_0_WVALID,
        m_axi_gmem_0_WREADY,
        m_axi_gmem_0_WDATA,
        m_axi_gmem_0_WSTRB,
        m_axi_gmem_0_WLAST,
        m_axi_gmem_0_WID,
        m_axi_gmem_0_WUSER,
        m_axi_gmem_0_ARVALID,
        m_axi_gmem_0_ARREADY,
        m_axi_gmem_0_ARADDR,
        m_axi_gmem_0_ARID,
        m_axi_gmem_0_ARLEN,
        m_axi_gmem_0_ARSIZE,
        m_axi_gmem_0_ARBURST,
        m_axi_gmem_0_ARLOCK,
        m_axi_gmem_0_ARCACHE,
        m_axi_gmem_0_ARPROT,
        m_axi_gmem_0_ARQOS,
        m_axi_gmem_0_ARREGION,
        m_axi_gmem_0_ARUSER,
        m_axi_gmem_0_RVALID,
        m_axi_gmem_0_RREADY,
        m_axi_gmem_0_RDATA,
        m_axi_gmem_0_RLAST,
        m_axi_gmem_0_RID,
        m_axi_gmem_0_RFIFONUM,
        m_axi_gmem_0_RUSER,
        m_axi_gmem_0_RRESP,
        m_axi_gmem_0_BVALID,
        m_axi_gmem_0_BREADY,
        m_axi_gmem_0_BRESP,
        m_axi_gmem_0_BID,
        m_axi_gmem_0_BUSER,
        sext_ln45,
        d_load_out,
        d_load_out_ap_vld,
        d_1_load_out,
        d_1_load_out_ap_vld,
        d_2_load_out,
        d_2_load_out_ap_vld,
        d_3_load_out,
        d_3_load_out_ap_vld,
        d_4_load_out,
        d_4_load_out_ap_vld,
        d_5_load_out,
        d_5_load_out_ap_vld,
        d_6_load_out,
        d_6_load_out_ap_vld,
        d_7_load_out,
        d_7_load_out_ap_vld,
        d_8_load_out,
        d_8_load_out_ap_vld,
        d_9_load_out,
        d_9_load_out_ap_vld,
        d_10_load_out,
        d_10_load_out_ap_vld,
        d_11_load_out,
        d_11_load_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_0_AWVALID;
input   m_axi_gmem_0_AWREADY;
output  [63:0] m_axi_gmem_0_AWADDR;
output  [0:0] m_axi_gmem_0_AWID;
output  [31:0] m_axi_gmem_0_AWLEN;
output  [2:0] m_axi_gmem_0_AWSIZE;
output  [1:0] m_axi_gmem_0_AWBURST;
output  [1:0] m_axi_gmem_0_AWLOCK;
output  [3:0] m_axi_gmem_0_AWCACHE;
output  [2:0] m_axi_gmem_0_AWPROT;
output  [3:0] m_axi_gmem_0_AWQOS;
output  [3:0] m_axi_gmem_0_AWREGION;
output  [0:0] m_axi_gmem_0_AWUSER;
output   m_axi_gmem_0_WVALID;
input   m_axi_gmem_0_WREADY;
output  [31:0] m_axi_gmem_0_WDATA;
output  [3:0] m_axi_gmem_0_WSTRB;
output   m_axi_gmem_0_WLAST;
output  [0:0] m_axi_gmem_0_WID;
output  [0:0] m_axi_gmem_0_WUSER;
output   m_axi_gmem_0_ARVALID;
input   m_axi_gmem_0_ARREADY;
output  [63:0] m_axi_gmem_0_ARADDR;
output  [0:0] m_axi_gmem_0_ARID;
output  [31:0] m_axi_gmem_0_ARLEN;
output  [2:0] m_axi_gmem_0_ARSIZE;
output  [1:0] m_axi_gmem_0_ARBURST;
output  [1:0] m_axi_gmem_0_ARLOCK;
output  [3:0] m_axi_gmem_0_ARCACHE;
output  [2:0] m_axi_gmem_0_ARPROT;
output  [3:0] m_axi_gmem_0_ARQOS;
output  [3:0] m_axi_gmem_0_ARREGION;
output  [0:0] m_axi_gmem_0_ARUSER;
input   m_axi_gmem_0_RVALID;
output   m_axi_gmem_0_RREADY;
input  [31:0] m_axi_gmem_0_RDATA;
input   m_axi_gmem_0_RLAST;
input  [0:0] m_axi_gmem_0_RID;
input  [8:0] m_axi_gmem_0_RFIFONUM;
input  [0:0] m_axi_gmem_0_RUSER;
input  [1:0] m_axi_gmem_0_RRESP;
input   m_axi_gmem_0_BVALID;
output   m_axi_gmem_0_BREADY;
input  [1:0] m_axi_gmem_0_BRESP;
input  [0:0] m_axi_gmem_0_BID;
input  [0:0] m_axi_gmem_0_BUSER;
input  [61:0] sext_ln45;
output  [31:0] d_load_out;
output   d_load_out_ap_vld;
output  [31:0] d_1_load_out;
output   d_1_load_out_ap_vld;
output  [31:0] d_2_load_out;
output   d_2_load_out_ap_vld;
output  [31:0] d_3_load_out;
output   d_3_load_out_ap_vld;
output  [31:0] d_4_load_out;
output   d_4_load_out_ap_vld;
output  [31:0] d_5_load_out;
output   d_5_load_out_ap_vld;
output  [31:0] d_6_load_out;
output   d_6_load_out_ap_vld;
output  [31:0] d_7_load_out;
output   d_7_load_out_ap_vld;
output  [31:0] d_8_load_out;
output   d_8_load_out_ap_vld;
output  [31:0] d_9_load_out;
output   d_9_load_out_ap_vld;
output  [31:0] d_10_load_out;
output   d_10_load_out_ap_vld;
output  [31:0] d_11_load_out;
output   d_11_load_out_ap_vld;

reg ap_idle;
reg m_axi_gmem_0_RREADY;
reg d_load_out_ap_vld;
reg d_1_load_out_ap_vld;
reg d_2_load_out_ap_vld;
reg d_3_load_out_ap_vld;
reg d_4_load_out_ap_vld;
reg d_5_load_out_ap_vld;
reg d_6_load_out_ap_vld;
reg d_7_load_out_ap_vld;
reg d_8_load_out_ap_vld;
reg d_9_load_out_ap_vld;
reg d_10_load_out_ap_vld;
reg d_11_load_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln45_fu_268_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem_blk_n_R;
wire    ap_block_pp0_stage0_grp1;
reg    ap_block_pp0_stage0_11001_grp1;
wire    ap_block_pp0_stage0_11001_grp0;
wire    ap_block_pp0_stage0_subdone_grp0;
wire   [31:0] j_fu_298_p3;
reg   [31:0] j_reg_565;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] i_fu_307_p3;
reg   [31:0] i_reg_569;
reg   [31:0] j_2_fu_80;
wire   [31:0] j_3_fu_325_p2;
wire    ap_loop_init;
wire    ap_block_pp0_stage0;
reg   [31:0] i_1_fu_84;
reg   [4:0] itr_1_fu_88;
wire   [4:0] add_ln45_fu_274_p2;
reg   [31:0] d_11_fu_92;
wire   [31:0] d_12_fu_352_p1;
reg   [31:0] d_10_fu_96;
reg   [31:0] d_9_fu_100;
reg   [31:0] d_8_fu_104;
reg   [31:0] d_7_fu_108;
reg   [31:0] d_6_fu_112;
reg   [31:0] d_5_fu_116;
reg   [31:0] d_4_fu_120;
reg   [31:0] d_3_fu_124;
reg   [31:0] d_2_fu_128;
reg   [31:0] d_1_fu_132;
reg   [31:0] d_fu_136;
reg    ap_block_pp0_stage0_01001_grp1;
wire   [0:0] icmp_ln47_fu_286_p2;
wire   [31:0] add_ln49_fu_292_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 j_2_fu_80 = 32'd0;
#0 i_1_fu_84 = 32'd0;
#0 itr_1_fu_88 = 5'd0;
#0 d_11_fu_92 = 32'd0;
#0 d_10_fu_96 = 32'd0;
#0 d_9_fu_100 = 32'd0;
#0 d_8_fu_104 = 32'd0;
#0 d_7_fu_108 = 32'd0;
#0 d_6_fu_112 = 32'd0;
#0 d_5_fu_116 = 32'd0;
#0 d_4_fu_120 = 32'd0;
#0 d_3_fu_124 = 32'd0;
#0 d_2_fu_128 = 32'd0;
#0 d_1_fu_132 = 32'd0;
#0 d_fu_136 = 32'd0;
#0 ap_done_reg = 1'b0;
end

winograd_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_1_fu_84 <= 32'd0;
        end else if (((icmp_ln45_fu_268_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_1_fu_84 <= i_fu_307_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            itr_1_fu_88 <= 5'd0;
        end else if (((icmp_ln45_fu_268_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            itr_1_fu_88 <= add_ln45_fu_274_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            j_2_fu_80 <= 32'd0;
        end else if (((icmp_ln45_fu_268_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            j_2_fu_80 <= j_3_fu_325_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (i_reg_569 == 32'd2) & (j_reg_565 == 32'd2))) begin
        d_10_fu_96 <= d_12_fu_352_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (i_reg_569 == 32'd2) & (j_reg_565 == 32'd3))) begin
        d_11_fu_92 <= d_12_fu_352_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (i_reg_569 == 32'd0) & (j_reg_565 == 32'd1))) begin
        d_1_fu_132 <= d_12_fu_352_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (i_reg_569 == 32'd0) & (j_reg_565 == 32'd2))) begin
        d_2_fu_128 <= d_12_fu_352_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (i_reg_569 == 32'd0) & (j_reg_565 == 32'd3))) begin
        d_3_fu_124 <= d_12_fu_352_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (i_reg_569 == 32'd1) & (j_reg_565 == 32'd0))) begin
        d_4_fu_120 <= d_12_fu_352_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (i_reg_569 == 32'd1) & (j_reg_565 == 32'd1))) begin
        d_5_fu_116 <= d_12_fu_352_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (i_reg_569 == 32'd1) & (j_reg_565 == 32'd2))) begin
        d_6_fu_112 <= d_12_fu_352_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (i_reg_569 == 32'd1) & (j_reg_565 == 32'd3))) begin
        d_7_fu_108 <= d_12_fu_352_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (i_reg_569 == 32'd2) & (j_reg_565 == 32'd0))) begin
        d_8_fu_104 <= d_12_fu_352_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (i_reg_569 == 32'd2) & (j_reg_565 == 32'd1))) begin
        d_9_fu_100 <= d_12_fu_352_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (i_reg_569 == 32'd0) & (j_reg_565 == 32'd0))) begin
        d_fu_136 <= d_12_fu_352_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_569 <= i_fu_307_p3;
        j_reg_565 <= j_fu_298_p3;
    end
end

always @ (*) begin
    if (((icmp_ln45_fu_268_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln45_fu_268_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001_grp1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        d_10_load_out_ap_vld = 1'b1;
    end else begin
        d_10_load_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln45_fu_268_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001_grp1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        d_11_load_out_ap_vld = 1'b1;
    end else begin
        d_11_load_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln45_fu_268_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001_grp1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        d_1_load_out_ap_vld = 1'b1;
    end else begin
        d_1_load_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln45_fu_268_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001_grp1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        d_2_load_out_ap_vld = 1'b1;
    end else begin
        d_2_load_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln45_fu_268_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001_grp1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        d_3_load_out_ap_vld = 1'b1;
    end else begin
        d_3_load_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln45_fu_268_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001_grp1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        d_4_load_out_ap_vld = 1'b1;
    end else begin
        d_4_load_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln45_fu_268_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001_grp1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        d_5_load_out_ap_vld = 1'b1;
    end else begin
        d_5_load_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln45_fu_268_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001_grp1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        d_6_load_out_ap_vld = 1'b1;
    end else begin
        d_6_load_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln45_fu_268_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001_grp1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        d_7_load_out_ap_vld = 1'b1;
    end else begin
        d_7_load_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln45_fu_268_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001_grp1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        d_8_load_out_ap_vld = 1'b1;
    end else begin
        d_8_load_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln45_fu_268_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001_grp1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        d_9_load_out_ap_vld = 1'b1;
    end else begin
        d_9_load_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln45_fu_268_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001_grp1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        d_load_out_ap_vld = 1'b1;
    end else begin
        d_load_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_grp1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        gmem_blk_n_R = m_axi_gmem_0_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        m_axi_gmem_0_RREADY = 1'b1;
    end else begin
        m_axi_gmem_0_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln45_fu_274_p2 = (itr_1_fu_88 + 5'd1);

assign add_ln49_fu_292_p2 = (i_1_fu_84 + 32'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001_grp1 = ((m_axi_gmem_0_RVALID == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((m_axi_gmem_0_RVALID == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

assign ap_block_pp0_stage0_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001_grp1 = ((m_axi_gmem_0_RVALID == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

assign ap_block_pp0_stage0_grp1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((m_axi_gmem_0_RVALID == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

assign ap_block_pp0_stage0_subdone_grp0 = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign ap_ready = ap_ready_sig;

assign d_10_load_out = d_10_fu_96;

assign d_11_load_out = d_11_fu_92;

assign d_12_fu_352_p1 = m_axi_gmem_0_RDATA;

assign d_1_load_out = d_1_fu_132;

assign d_2_load_out = d_2_fu_128;

assign d_3_load_out = d_3_fu_124;

assign d_4_load_out = d_4_fu_120;

assign d_5_load_out = d_5_fu_116;

assign d_6_load_out = d_6_fu_112;

assign d_7_load_out = d_7_fu_108;

assign d_8_load_out = d_8_fu_104;

assign d_9_load_out = d_9_fu_100;

assign d_load_out = d_fu_136;

assign i_fu_307_p3 = ((icmp_ln47_fu_286_p2[0:0] == 1'b1) ? add_ln49_fu_292_p2 : i_1_fu_84);

assign icmp_ln45_fu_268_p2 = ((itr_1_fu_88 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln47_fu_286_p2 = ((j_2_fu_80 == 32'd4) ? 1'b1 : 1'b0);

assign j_3_fu_325_p2 = (j_fu_298_p3 + 32'd1);

assign j_fu_298_p3 = ((icmp_ln47_fu_286_p2[0:0] == 1'b1) ? 32'd0 : j_2_fu_80);

assign m_axi_gmem_0_ARADDR = 64'd0;

assign m_axi_gmem_0_ARBURST = 2'd0;

assign m_axi_gmem_0_ARCACHE = 4'd0;

assign m_axi_gmem_0_ARID = 1'd0;

assign m_axi_gmem_0_ARLEN = 32'd0;

assign m_axi_gmem_0_ARLOCK = 2'd0;

assign m_axi_gmem_0_ARPROT = 3'd0;

assign m_axi_gmem_0_ARQOS = 4'd0;

assign m_axi_gmem_0_ARREGION = 4'd0;

assign m_axi_gmem_0_ARSIZE = 3'd0;

assign m_axi_gmem_0_ARUSER = 1'd0;

assign m_axi_gmem_0_ARVALID = 1'b0;

assign m_axi_gmem_0_AWADDR = 64'd0;

assign m_axi_gmem_0_AWBURST = 2'd0;

assign m_axi_gmem_0_AWCACHE = 4'd0;

assign m_axi_gmem_0_AWID = 1'd0;

assign m_axi_gmem_0_AWLEN = 32'd0;

assign m_axi_gmem_0_AWLOCK = 2'd0;

assign m_axi_gmem_0_AWPROT = 3'd0;

assign m_axi_gmem_0_AWQOS = 4'd0;

assign m_axi_gmem_0_AWREGION = 4'd0;

assign m_axi_gmem_0_AWSIZE = 3'd0;

assign m_axi_gmem_0_AWUSER = 1'd0;

assign m_axi_gmem_0_AWVALID = 1'b0;

assign m_axi_gmem_0_BREADY = 1'b0;

assign m_axi_gmem_0_WDATA = 32'd0;

assign m_axi_gmem_0_WID = 1'd0;

assign m_axi_gmem_0_WLAST = 1'b0;

assign m_axi_gmem_0_WSTRB = 4'd0;

assign m_axi_gmem_0_WUSER = 1'd0;

assign m_axi_gmem_0_WVALID = 1'b0;

endmodule //winograd_winograd_Pipeline_read_d
