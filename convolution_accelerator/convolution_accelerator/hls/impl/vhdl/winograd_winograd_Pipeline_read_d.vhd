-- ==============================================================
-- Generated by Vitis HLS v2025.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity winograd_winograd_Pipeline_read_d is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_0_AWREADY : IN STD_LOGIC;
    m_axi_gmem_0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_WVALID : OUT STD_LOGIC;
    m_axi_gmem_0_WREADY : IN STD_LOGIC;
    m_axi_gmem_0_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_0_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_0_WLAST : OUT STD_LOGIC;
    m_axi_gmem_0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_0_ARREADY : IN STD_LOGIC;
    m_axi_gmem_0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_RVALID : IN STD_LOGIC;
    m_axi_gmem_0_RREADY : OUT STD_LOGIC;
    m_axi_gmem_0_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_0_RLAST : IN STD_LOGIC;
    m_axi_gmem_0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_0_BVALID : IN STD_LOGIC;
    m_axi_gmem_0_BREADY : OUT STD_LOGIC;
    m_axi_gmem_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sext_ln45 : IN STD_LOGIC_VECTOR (61 downto 0);
    d_load_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    d_load_out_ap_vld : OUT STD_LOGIC;
    d_1_load_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    d_1_load_out_ap_vld : OUT STD_LOGIC;
    d_2_load_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    d_2_load_out_ap_vld : OUT STD_LOGIC;
    d_3_load_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    d_3_load_out_ap_vld : OUT STD_LOGIC;
    d_4_load_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    d_4_load_out_ap_vld : OUT STD_LOGIC;
    d_5_load_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    d_5_load_out_ap_vld : OUT STD_LOGIC;
    d_6_load_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    d_6_load_out_ap_vld : OUT STD_LOGIC;
    d_7_load_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    d_7_load_out_ap_vld : OUT STD_LOGIC;
    d_8_load_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    d_8_load_out_ap_vld : OUT STD_LOGIC;
    d_9_load_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    d_9_load_out_ap_vld : OUT STD_LOGIC;
    d_10_load_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    d_10_load_out_ap_vld : OUT STD_LOGIC;
    d_11_load_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    d_11_load_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of winograd_winograd_Pipeline_read_d is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln45_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0_grp1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_grp1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_grp0 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone_grp0 : BOOLEAN;
    signal j_fu_298_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_reg_565 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_fu_307_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_569 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_2_fu_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal j_3_fu_325_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_1_fu_84 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal itr_1_fu_88 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal add_ln45_fu_274_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal d_11_fu_92 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal d_12_fu_352_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal d_10_fu_96 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal d_9_fu_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal d_8_fu_104 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal d_7_fu_108 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal d_6_fu_112 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal d_5_fu_116 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal d_4_fu_120 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal d_3_fu_124 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal d_2_fu_128 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal d_1_fu_132 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal d_fu_136 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_block_pp0_stage0_01001_grp1 : BOOLEAN;
    signal icmp_ln47_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln49_fu_292_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component winograd_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component winograd_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    i_1_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_1_fu_84 <= ap_const_lv32_0;
                elsif (((icmp_ln45_fu_268_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i_1_fu_84 <= i_fu_307_p3;
                end if;
            end if; 
        end if;
    end process;

    itr_1_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    itr_1_fu_88 <= ap_const_lv5_0;
                elsif (((icmp_ln45_fu_268_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    itr_1_fu_88 <= add_ln45_fu_274_p2;
                end if;
            end if; 
        end if;
    end process;

    j_2_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    j_2_fu_80 <= ap_const_lv32_0;
                elsif (((icmp_ln45_fu_268_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    j_2_fu_80 <= j_3_fu_325_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (i_reg_569 = ap_const_lv32_2) and (j_reg_565 = ap_const_lv32_2))) then
                d_10_fu_96 <= d_12_fu_352_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (i_reg_569 = ap_const_lv32_2) and (j_reg_565 = ap_const_lv32_3))) then
                d_11_fu_92 <= d_12_fu_352_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (i_reg_569 = ap_const_lv32_0) and (j_reg_565 = ap_const_lv32_1))) then
                d_1_fu_132 <= d_12_fu_352_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (i_reg_569 = ap_const_lv32_0) and (j_reg_565 = ap_const_lv32_2))) then
                d_2_fu_128 <= d_12_fu_352_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (i_reg_569 = ap_const_lv32_0) and (j_reg_565 = ap_const_lv32_3))) then
                d_3_fu_124 <= d_12_fu_352_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (i_reg_569 = ap_const_lv32_1) and (j_reg_565 = ap_const_lv32_0))) then
                d_4_fu_120 <= d_12_fu_352_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (i_reg_569 = ap_const_lv32_1) and (j_reg_565 = ap_const_lv32_1))) then
                d_5_fu_116 <= d_12_fu_352_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (i_reg_569 = ap_const_lv32_1) and (j_reg_565 = ap_const_lv32_2))) then
                d_6_fu_112 <= d_12_fu_352_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (i_reg_569 = ap_const_lv32_1) and (j_reg_565 = ap_const_lv32_3))) then
                d_7_fu_108 <= d_12_fu_352_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (i_reg_569 = ap_const_lv32_2) and (j_reg_565 = ap_const_lv32_0))) then
                d_8_fu_104 <= d_12_fu_352_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (i_reg_569 = ap_const_lv32_2) and (j_reg_565 = ap_const_lv32_1))) then
                d_9_fu_100 <= d_12_fu_352_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (i_reg_569 = ap_const_lv32_0) and (j_reg_565 = ap_const_lv32_0))) then
                d_fu_136 <= d_12_fu_352_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_reg_569 <= i_fu_307_p3;
                j_reg_565 <= j_fu_298_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln45_fu_274_p2 <= std_logic_vector(unsigned(itr_1_fu_88) + unsigned(ap_const_lv5_1));
    add_ln49_fu_292_p2 <= std_logic_vector(unsigned(i_1_fu_84) + unsigned(ap_const_lv32_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_grp1_assign_proc : process(ap_enable_reg_pp0_iter2, m_axi_gmem_0_RVALID)
    begin
                ap_block_pp0_stage0_01001_grp1 <= ((m_axi_gmem_0_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, m_axi_gmem_0_RVALID)
    begin
                ap_block_pp0_stage0_11001 <= ((m_axi_gmem_0_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage0_11001_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_grp1_assign_proc : process(ap_enable_reg_pp0_iter2, m_axi_gmem_0_RVALID)
    begin
                ap_block_pp0_stage0_11001_grp1 <= ((m_axi_gmem_0_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage0_grp1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, m_axi_gmem_0_RVALID)
    begin
                ap_block_pp0_stage0_subdone <= ((m_axi_gmem_0_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage0_subdone_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln45_fu_268_p2)
    begin
        if (((icmp_ln45_fu_268_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    d_10_load_out <= d_10_fu_96;

    d_10_load_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln45_fu_268_p2, ap_loop_exit_ready, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln45_fu_268_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            d_10_load_out_ap_vld <= ap_const_logic_1;
        else 
            d_10_load_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    d_11_load_out <= d_11_fu_92;

    d_11_load_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln45_fu_268_p2, ap_loop_exit_ready, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln45_fu_268_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            d_11_load_out_ap_vld <= ap_const_logic_1;
        else 
            d_11_load_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    d_12_fu_352_p1 <= m_axi_gmem_0_RDATA;
    d_1_load_out <= d_1_fu_132;

    d_1_load_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln45_fu_268_p2, ap_loop_exit_ready, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln45_fu_268_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            d_1_load_out_ap_vld <= ap_const_logic_1;
        else 
            d_1_load_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    d_2_load_out <= d_2_fu_128;

    d_2_load_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln45_fu_268_p2, ap_loop_exit_ready, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln45_fu_268_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            d_2_load_out_ap_vld <= ap_const_logic_1;
        else 
            d_2_load_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    d_3_load_out <= d_3_fu_124;

    d_3_load_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln45_fu_268_p2, ap_loop_exit_ready, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln45_fu_268_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            d_3_load_out_ap_vld <= ap_const_logic_1;
        else 
            d_3_load_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    d_4_load_out <= d_4_fu_120;

    d_4_load_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln45_fu_268_p2, ap_loop_exit_ready, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln45_fu_268_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            d_4_load_out_ap_vld <= ap_const_logic_1;
        else 
            d_4_load_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    d_5_load_out <= d_5_fu_116;

    d_5_load_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln45_fu_268_p2, ap_loop_exit_ready, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln45_fu_268_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            d_5_load_out_ap_vld <= ap_const_logic_1;
        else 
            d_5_load_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    d_6_load_out <= d_6_fu_112;

    d_6_load_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln45_fu_268_p2, ap_loop_exit_ready, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln45_fu_268_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            d_6_load_out_ap_vld <= ap_const_logic_1;
        else 
            d_6_load_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    d_7_load_out <= d_7_fu_108;

    d_7_load_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln45_fu_268_p2, ap_loop_exit_ready, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln45_fu_268_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            d_7_load_out_ap_vld <= ap_const_logic_1;
        else 
            d_7_load_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    d_8_load_out <= d_8_fu_104;

    d_8_load_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln45_fu_268_p2, ap_loop_exit_ready, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln45_fu_268_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            d_8_load_out_ap_vld <= ap_const_logic_1;
        else 
            d_8_load_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    d_9_load_out <= d_9_fu_100;

    d_9_load_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln45_fu_268_p2, ap_loop_exit_ready, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln45_fu_268_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            d_9_load_out_ap_vld <= ap_const_logic_1;
        else 
            d_9_load_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    d_load_out <= d_fu_136;

    d_load_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln45_fu_268_p2, ap_loop_exit_ready, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln45_fu_268_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            d_load_out_ap_vld <= ap_const_logic_1;
        else 
            d_load_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(ap_enable_reg_pp0_iter2, m_axi_gmem_0_RVALID, ap_block_pp0_stage0_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_grp1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            gmem_blk_n_R <= m_axi_gmem_0_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    i_fu_307_p3 <= 
        add_ln49_fu_292_p2 when (icmp_ln47_fu_286_p2(0) = '1') else 
        i_1_fu_84;
    icmp_ln45_fu_268_p2 <= "1" when (itr_1_fu_88 = ap_const_lv5_10) else "0";
    icmp_ln47_fu_286_p2 <= "1" when (j_2_fu_80 = ap_const_lv32_4) else "0";
    j_3_fu_325_p2 <= std_logic_vector(unsigned(j_fu_298_p3) + unsigned(ap_const_lv32_1));
    j_fu_298_p3 <= 
        ap_const_lv32_0 when (icmp_ln47_fu_286_p2(0) = '1') else 
        j_2_fu_80;
    m_axi_gmem_0_ARADDR <= ap_const_lv64_0;
    m_axi_gmem_0_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_0_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_0_ARID <= ap_const_lv1_0;
    m_axi_gmem_0_ARLEN <= ap_const_lv32_0;
    m_axi_gmem_0_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_0_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_0_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_0_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_0_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_0_ARUSER <= ap_const_lv1_0;
    m_axi_gmem_0_ARVALID <= ap_const_logic_0;
    m_axi_gmem_0_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_0_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_0_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_0_AWID <= ap_const_lv1_0;
    m_axi_gmem_0_AWLEN <= ap_const_lv32_0;
    m_axi_gmem_0_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_0_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_0_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_0_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_0_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_0_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_0_AWVALID <= ap_const_logic_0;
    m_axi_gmem_0_BREADY <= ap_const_logic_0;

    m_axi_gmem_0_RREADY_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            m_axi_gmem_0_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_0_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_0_WDATA <= ap_const_lv32_0;
    m_axi_gmem_0_WID <= ap_const_lv1_0;
    m_axi_gmem_0_WLAST <= ap_const_logic_0;
    m_axi_gmem_0_WSTRB <= ap_const_lv4_0;
    m_axi_gmem_0_WUSER <= ap_const_lv1_0;
    m_axi_gmem_0_WVALID <= ap_const_logic_0;
end behav;
